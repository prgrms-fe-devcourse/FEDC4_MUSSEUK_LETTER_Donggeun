/**
 * Generated by orval v6.22.1 🍺
 * Do not edit manually.
 * Swagger Playground
 * For Swagger Studying
 * OpenAPI spec version: 1.0.0
 */
export type PostPostsPostIdCommentsBody = {
  author: string;
  content: string;
  imageName: string;
  positionX: number;
  positionY: number;
};

export type PutPostsPostId400Validation = {
  content?: string;
  imageName?: string;
  title?: string;
};

export type PutPostsPostId400 = {
  message: string;
  validation?: PutPostsPostId400Validation;
};

export type PutPostsPostIdBody = {
  content: string;
  imageName: string;
  title: string;
};

export type PostPosts400Validation = {
  content?: string;
  imageName?: string;
  title?: string;
};

export type PostPosts400 = {
  message: string;
  validation?: PostPosts400Validation;
};

export type PostPosts201 = {
  postId: number;
};

export type PostPostsBody = {
  content: string;
  imageName: string;
  title: string;
};

export type GetPostsOrderby = (typeof GetPostsOrderby)[keyof typeof GetPostsOrderby];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPostsOrderby = {
  popular: 'popular',
  latest: 'latest'
} as const;

export type GetPostsParams = {
  /**
   * 페이지 번호
   */
  page?: number;
  /**
   * 정렬 기준 (인기순, 최신순)
   */
  orderby?: GetPostsOrderby;
  /**
   * 특정 유저가 작성한 머쓱이만 조회할 때 사용 (userId)
   */
  authorId?: number;
  /**
   * 특정 키워드가 제목이나 내용에 포함된 머쓱이만 조회할 때 사용
   */
  keyword?: string;
};

export type PostSlackVerificationBody = {
  slackId: string;
  slackWorkspace: string;
};

export type PutUsersUserIdSlack400Validation = {
  code?: string;
};

export type PutUsersUserIdSlack400 = {
  message: string;
  validation?: PutUsersUserIdSlack400Validation;
};

export type PutUsersUserIdSlackBody = {
  code: string;
};

export type PutUsersUserId400Validation = {
  introduce?: string;
  name?: string;
};

export type PutUsersUserId400 = {
  message: string;
  validation?: PutUsersUserId400Validation;
};

export type PutUsersUserIdBody = {
  introduce: string;
  name: string;
};

export type GetUsersParams = {
  /**
   * 페이지 번호
   */
  page?: number;
  /**
   * 특정 키워드가 포함된 사용자만 조회할 때 사용
   */
  keyword?: string;
};

export type PutAuthPassword400Validation = {
  password?: string;
};

export type PutAuthPassword400 = {
  message: string;
  validation?: PutAuthPassword400Validation;
};

export type PutAuthPassword200 = {
  message: string;
};

export type PutAuthPasswordBody = {
  password: string;
};

export type GetAuthCheck200 = {
  accessToken: string;
  userId: number;
};

export type PostAuthSignout200 = {
  message: string;
};

export type PostAuthSignin400Validation = {
  password?: string;
  username?: string;
};

export type PostAuthSignin400 = {
  message: string;
  validation?: PostAuthSignin400Validation;
};

export type PostAuthSignin200 = {
  accessToken: string;
  userId: number;
};

export type PostAuthSigninBody = {
  password: string;
  username: string;
};

export type PostAuthSignup409 = {
  message: string;
};

export type PostAuthSignup400Validation = {
  name?: string;
  password?: string;
  username?: string;
};

export type PostAuthSignup400 = {
  message: string;
  validation?: PostAuthSignup400Validation;
};

export type PostAuthSignup201 = {
  accessToken: string;
  userId: number;
};

export type PostAuthSignupBody = {
  name: string;
  password: string;
  username: string;
};

export type NotFoundPostResponse = {
  message: string;
};

export type NotFoundCommentResponse = {
  message: string;
};

export type NotFoundUserResponse = {
  message: string;
};

export type UnauthorizedResponse = {
  message: string;
};

export interface Comment {
  author: string;
  commentId: number;
  content: string;
  imageName: string;
  positionX: number;
  positionY: number;
}

export type PostCommentsItem = {
  commentId: number;
  imageName: string;
  positionX: number;
  positionY: number;
};

export interface Post {
  comments: PostCommentsItem[];
  content: string;
  imageName: string;
  postId: number;
  title: string;
}

export interface User {
  commentCount: number;
  imageName: string;
  introduce: string;
  name: string;
  postCount: number;
  slackId: string;
  slackWorkspace: string;
  userId: number;
  username: string;
}
